定义数组A，存在n个元素A[1]~A[n]

定义差分数组D，其中D[1] = A[1], D[i] = A[i] - A[i-1], D[n+1] = 0
观察可发现
性质(1)，即A[i] = Σ(D[1]…D[i])，证：
首先A[1] = D[1]，之后A[2] = D[1] + D[2] = A[1] + A[2] - A[1] = A[2]，利用归纳法可证

定义前缀和数组S，其中S[i] = Σ(A[1]…A[i])
观察可发现
性质：Σ(A[i]…A[j]) = S[j] - S[i-1] ，证：
A[j]    =  A[1] + … + A[i-1] + A[i] + … + A[j]
A[i-1] = A[1] + … + A[i-1]

定义某数组为X
X数组的前缀和数组为S
S的前缀和数组为SS
SS[i] = Σ(S[0]…S[i]) = i * X[1] + (i-1) * X[2] + … + 1 * X[i]  (从第1项开始每一项都有一个X[1]，从第2项开始每一项都有一个X[2])
         = (i+1) *(X[1] + X[2] + … + X[i]) - (X[1] + 2* X[2] + … + i * X[i])
令T数组为 T[i] = i * X[i]，则SS[i] = (i+1) * S[i] - T[i]

存在某数组X` ，其差分数组为X，那么上面的性质仍然成立。
由于X`数组的差分数组的前缀和就是它本身，所以SS和S数组对于X`数组都降了一级，SS变为了前缀和数组，而S变为了X`数组本身。

我们需要求出A数组的区间和，那么简单的方法就是利用A的前缀和数组S，S[j] - S[i-1] 即为 i…j区间的和。
假如我们因为某种原因，修改操作时，我们不操作数组A本身而操作数组A的差分数组，为了获得等价的效果，
计算区间和就表示为了关于差分数组的 SS[j] - SS[i-1]。 =>  以上，查询操作得到了解答。

对于A数组和它的差分数组DS，我们令DS[i] += d，那么由于定义，
A[i-1] = DS[i-1] + A[i-2] 而 A[i] = DS[i] + A[i-1]
由此得出A[1…i-1]都没有发生变化，而A[i…end]由于递推都获得了d的增量。
为了构造一个获得增量的区间，例如i…j区间，我们按图索骥令DS[j+1] -= d
由此A[j+1…end]区间最终增加了 d - d 的增量，等于没修改。
于是我们得到修改区间i…j的方法， DS[i] += d 同时 DS[j+1] -= d。 => 以上，修改操作得到了解答。

捋顺数组之间的关系，我们回到SS[i] = (i+1) * S[i] - T[i]中，
区间查询即为 SS[j] - SS[i-1]
区间修改即为 X[i] += d 同时 X[j+1] -= d
其中X是原数组的差分数组。
观察SS[i]的表达式，SS[i] = (i+1) *(X[1] + X[2] + … + X[i]) - (X[1] + 2* X[2] + … + i * X[i])
该表达式可以表示为两个前缀和。
故求SS[j] - SS[i-1] 即转化为 查找 4 个前缀和 进行计算的过程（利用树状数组或者zkw线段树）
而全体过程完全不改变原数组X`，一切操作皆借助其差分数组X完成。